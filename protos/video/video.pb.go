// Code generated by protoc-gen-go.
// source: protos/video/video.proto
// DO NOT EDIT!

/*
Package video is a generated protocol buffer package.

It is generated from these files:
	protos/video/video.proto

It has these top-level messages:
	RequestDeleteVideo
	ResponseDeleteVideo
	RequestUpdateVideo
	ResponseUpdateVideo
	RequestVideoID
	ResponseVideoDetail
	VideoDetail
	ResponseVideoCover
	ResponseVideoTS
	ResponseVideoTotalView
*/
package video

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_OK ErrorCode = 0
	// client
	ErrorCode_REQUEST_INVALID ErrorCode = 1000
	// server response
	ErrorCode_VIDEOID_WRONG   ErrorCode = 1100
	ErrorCode_VIDEO_NOT_EXIST ErrorCode = 1101
	// server - Generic error for client
	ErrorCode_DB_ERROR     ErrorCode = 2000
	ErrorCode_DATA_ERROR   ErrorCode = 2001
	ErrorCode_SERVER_ERROR ErrorCode = 2002
	// general - unknown
	ErrorCode_UNKNOWN       ErrorCode = 3000
	ErrorCode_NETWORK_ERROR ErrorCode = 3001
	ErrorCode_SYSTEM_ERROR  ErrorCode = 3002
)

var ErrorCode_name = map[int32]string{
	0:    "OK",
	1000: "REQUEST_INVALID",
	1100: "VIDEOID_WRONG",
	1101: "VIDEO_NOT_EXIST",
	2000: "DB_ERROR",
	2001: "DATA_ERROR",
	2002: "SERVER_ERROR",
	3000: "UNKNOWN",
	3001: "NETWORK_ERROR",
	3002: "SYSTEM_ERROR",
}
var ErrorCode_value = map[string]int32{
	"OK":              0,
	"REQUEST_INVALID": 1000,
	"VIDEOID_WRONG":   1100,
	"VIDEO_NOT_EXIST": 1101,
	"DB_ERROR":        2000,
	"DATA_ERROR":      2001,
	"SERVER_ERROR":    2002,
	"UNKNOWN":         3000,
	"NETWORK_ERROR":   3001,
	"SYSTEM_ERROR":    3002,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestDeleteVideo struct {
	VideoID string         `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	Video   []*VideoDetail `protobuf:"bytes,2,rep,name=video" json:"video,omitempty"`
}

func (m *RequestDeleteVideo) Reset()                    { *m = RequestDeleteVideo{} }
func (m *RequestDeleteVideo) String() string            { return proto.CompactTextString(m) }
func (*RequestDeleteVideo) ProtoMessage()               {}
func (*RequestDeleteVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestDeleteVideo) GetVideo() []*VideoDetail {
	if m != nil {
		return m.Video
	}
	return nil
}

type ResponseDeleteVideo struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *ResponseDeleteVideo) Reset()                    { *m = ResponseDeleteVideo{} }
func (m *ResponseDeleteVideo) String() string            { return proto.CompactTextString(m) }
func (*ResponseDeleteVideo) ProtoMessage()               {}
func (*ResponseDeleteVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RequestUpdateVideo struct {
	VideoID string         `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	Video   []*VideoDetail `protobuf:"bytes,2,rep,name=video" json:"video,omitempty"`
}

func (m *RequestUpdateVideo) Reset()                    { *m = RequestUpdateVideo{} }
func (m *RequestUpdateVideo) String() string            { return proto.CompactTextString(m) }
func (*RequestUpdateVideo) ProtoMessage()               {}
func (*RequestUpdateVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestUpdateVideo) GetVideo() []*VideoDetail {
	if m != nil {
		return m.Video
	}
	return nil
}

type ResponseUpdateVideo struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *ResponseUpdateVideo) Reset()                    { *m = ResponseUpdateVideo{} }
func (m *ResponseUpdateVideo) String() string            { return proto.CompactTextString(m) }
func (*ResponseUpdateVideo) ProtoMessage()               {}
func (*ResponseUpdateVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RequestVideoID struct {
	VideoID string `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
}

func (m *RequestVideoID) Reset()                    { *m = RequestVideoID{} }
func (m *RequestVideoID) String() string            { return proto.CompactTextString(m) }
func (*RequestVideoID) ProtoMessage()               {}
func (*RequestVideoID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ResponseVideoDetail struct {
	Error       ErrorCode      `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Video       []*VideoDetail `protobuf:"bytes,3,rep,name=video" json:"video,omitempty"`
}

func (m *ResponseVideoDetail) Reset()                    { *m = ResponseVideoDetail{} }
func (m *ResponseVideoDetail) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoDetail) ProtoMessage()               {}
func (*ResponseVideoDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResponseVideoDetail) GetVideo() []*VideoDetail {
	if m != nil {
		return m.Video
	}
	return nil
}

type VideoDetail struct {
	VideoDetail map[string]string `protobuf:"bytes,1,rep,name=video_detail" json:"video_detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VideoDetail) Reset()                    { *m = VideoDetail{} }
func (m *VideoDetail) String() string            { return proto.CompactTextString(m) }
func (*VideoDetail) ProtoMessage()               {}
func (*VideoDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VideoDetail) GetVideoDetail() map[string]string {
	if m != nil {
		return m.VideoDetail
	}
	return nil
}

type ResponseVideoCover struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Cover       string    `protobuf:"bytes,3,opt,name=cover" json:"cover,omitempty"`
}

func (m *ResponseVideoCover) Reset()                    { *m = ResponseVideoCover{} }
func (m *ResponseVideoCover) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoCover) ProtoMessage()               {}
func (*ResponseVideoCover) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ResponseVideoTS struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Timestamp   int64     `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ResponseVideoTS) Reset()                    { *m = ResponseVideoTS{} }
func (m *ResponseVideoTS) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoTS) ProtoMessage()               {}
func (*ResponseVideoTS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ResponseVideoTotalView struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Totalview   int32     `protobuf:"varint,3,opt,name=totalview" json:"totalview,omitempty"`
}

func (m *ResponseVideoTotalView) Reset()                    { *m = ResponseVideoTotalView{} }
func (m *ResponseVideoTotalView) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoTotalView) ProtoMessage()               {}
func (*ResponseVideoTotalView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*RequestDeleteVideo)(nil), "video.RequestDeleteVideo")
	proto.RegisterType((*ResponseDeleteVideo)(nil), "video.ResponseDeleteVideo")
	proto.RegisterType((*RequestUpdateVideo)(nil), "video.RequestUpdateVideo")
	proto.RegisterType((*ResponseUpdateVideo)(nil), "video.ResponseUpdateVideo")
	proto.RegisterType((*RequestVideoID)(nil), "video.RequestVideoID")
	proto.RegisterType((*ResponseVideoDetail)(nil), "video.ResponseVideoDetail")
	proto.RegisterType((*VideoDetail)(nil), "video.VideoDetail")
	proto.RegisterType((*ResponseVideoCover)(nil), "video.ResponseVideoCover")
	proto.RegisterType((*ResponseVideoTS)(nil), "video.ResponseVideoTS")
	proto.RegisterType((*ResponseVideoTotalView)(nil), "video.ResponseVideoTotalView")
	proto.RegisterEnum("video.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VideoService service

type VideoServiceClient interface {
	// Search returns a Google search result for the query.
	GetDetail(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoDetail, error)
	GetCover(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoCover, error)
	GetTS(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTS, error)
	GetTotalView(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTotalView, error)
	// Delete video, delete field
	DeleteVideo(ctx context.Context, in *RequestDeleteVideo, opts ...grpc.CallOption) (*ResponseDeleteVideo, error)
	// Set videoDetail, field, update field
	SetVideo(ctx context.Context, in *RequestUpdateVideo, opts ...grpc.CallOption) (*ResponseUpdateVideo, error)
}

type videoServiceClient struct {
	cc *grpc.ClientConn
}

func NewVideoServiceClient(cc *grpc.ClientConn) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetDetail(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoDetail, error) {
	out := new(ResponseVideoDetail)
	err := grpc.Invoke(ctx, "/video.VideoService/GetDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetCover(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoCover, error) {
	out := new(ResponseVideoCover)
	err := grpc.Invoke(ctx, "/video.VideoService/GetCover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetTS(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTS, error) {
	out := new(ResponseVideoTS)
	err := grpc.Invoke(ctx, "/video.VideoService/GetTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetTotalView(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTotalView, error) {
	out := new(ResponseVideoTotalView)
	err := grpc.Invoke(ctx, "/video.VideoService/GetTotalView", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteVideo(ctx context.Context, in *RequestDeleteVideo, opts ...grpc.CallOption) (*ResponseDeleteVideo, error) {
	out := new(ResponseDeleteVideo)
	err := grpc.Invoke(ctx, "/video.VideoService/DeleteVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) SetVideo(ctx context.Context, in *RequestUpdateVideo, opts ...grpc.CallOption) (*ResponseUpdateVideo, error) {
	out := new(ResponseUpdateVideo)
	err := grpc.Invoke(ctx, "/video.VideoService/SetVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceServer interface {
	// Search returns a Google search result for the query.
	GetDetail(context.Context, *RequestVideoID) (*ResponseVideoDetail, error)
	GetCover(context.Context, *RequestVideoID) (*ResponseVideoCover, error)
	GetTS(context.Context, *RequestVideoID) (*ResponseVideoTS, error)
	GetTotalView(context.Context, *RequestVideoID) (*ResponseVideoTotalView, error)
	// Delete video, delete field
	DeleteVideo(context.Context, *RequestDeleteVideo) (*ResponseDeleteVideo, error)
	// Set videoDetail, field, update field
	SetVideo(context.Context, *RequestUpdateVideo) (*ResponseUpdateVideo, error)
}

func RegisterVideoServiceServer(s *grpc.Server, srv VideoServiceServer) {
	s.RegisterService(&_VideoService_serviceDesc, srv)
}

func _VideoService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetDetail(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetCover(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetTS(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetTotalView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetTotalView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetTotalView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetTotalView(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/DeleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideo(ctx, req.(*RequestDeleteVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_SetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).SetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/SetVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).SetVideo(ctx, req.(*RequestUpdateVideo))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _VideoService_GetDetail_Handler,
		},
		{
			MethodName: "GetCover",
			Handler:    _VideoService_GetCover_Handler,
		},
		{
			MethodName: "GetTS",
			Handler:    _VideoService_GetTS_Handler,
		},
		{
			MethodName: "GetTotalView",
			Handler:    _VideoService_GetTotalView_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoService_DeleteVideo_Handler,
		},
		{
			MethodName: "SetVideo",
			Handler:    _VideoService_SetVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protos/video/video.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x95, 0x5f, 0x4f, 0xd3, 0x5e,
	0x18, 0xc7, 0x7f, 0xdd, 0x7e, 0x83, 0xed, 0xd9, 0x46, 0xcb, 0x41, 0x60, 0x0c, 0x10, 0xa8, 0x9a,
	0x10, 0x2e, 0x58, 0x9c, 0x37, 0xca, 0x1d, 0xd2, 0x66, 0x2e, 0xd3, 0x36, 0xb6, 0x65, 0x88, 0x17,
	0x2e, 0x85, 0x3d, 0x21, 0x8d, 0xa3, 0x9d, 0xed, 0xa1, 0x84, 0xa8, 0x37, 0xbe, 0x05, 0xdf, 0x8c,
	0x7f, 0xde, 0x82, 0x26, 0xfe, 0x79, 0x0b, 0x26, 0xfa, 0x32, 0x4c, 0x4f, 0x0b, 0x3b, 0x75, 0xdb,
	0xcd, 0xf4, 0x66, 0x69, 0x9f, 0x3f, 0xdf, 0xcf, 0xf7, 0x9c, 0xf3, 0xec, 0x14, 0x2a, 0x7d, 0xdf,
	0xa3, 0x5e, 0x50, 0x0b, 0x9d, 0x2e, 0x7a, 0xf1, 0xef, 0x36, 0x0b, 0x91, 0x1c, 0x7b, 0xa9, 0xae,
	0x9c, 0x78, 0xde, 0x49, 0x0f, 0x6b, 0x76, 0xdf, 0xa9, 0xd9, 0xae, 0xeb, 0x51, 0x9b, 0x3a, 0x9e,
	0x1b, 0xc4, 0x45, 0xf2, 0x03, 0x20, 0x06, 0xbe, 0x38, 0xc3, 0x80, 0x2a, 0xd8, 0x43, 0x8a, 0xed,
	0xa8, 0x87, 0x88, 0x30, 0xcd, 0x1e, 0x9a, 0x4a, 0x45, 0x58, 0x17, 0x36, 0x0b, 0x64, 0x03, 0x62,
	0xb5, 0x4a, 0x66, 0x3d, 0xbb, 0x59, 0xac, 0x93, 0xed, 0x18, 0xc4, 0x8a, 0x14, 0xa4, 0xb6, 0xd3,
	0x93, 0x5b, 0x30, 0x67, 0x60, 0xd0, 0xf7, 0xdc, 0x00, 0x79, 0xa9, 0x35, 0xc8, 0xa1, 0xef, 0x7b,
	0x3e, 0x13, 0x9a, 0xa9, 0x4b, 0x49, 0xa7, 0x1a, 0xc5, 0xf6, 0xbc, 0x2e, 0x92, 0x39, 0x28, 0x76,
	0x31, 0x38, 0xf6, 0x9d, 0x7e, 0xe4, 0xab, 0x92, 0x89, 0x78, 0x9c, 0xad, 0xfd, 0x7e, 0xd7, 0xfe,
	0x47, 0xb6, 0x78, 0xa9, 0xc9, 0x6c, 0x6d, 0xc0, 0x4c, 0x62, 0x2b, 0xf1, 0x31, 0x64, 0x49, 0x76,
	0x07, 0x3c, 0xce, 0xc6, 0x64, 0xbc, 0xc1, 0xfa, 0xb2, 0x63, 0xd7, 0xf7, 0x0a, 0x8a, 0x3c, 0xe7,
	0x1e, 0x94, 0x58, 0x4d, 0xa7, 0xcb, 0xde, 0x2b, 0x02, 0x6b, 0xbc, 0x31, 0xdc, 0xc8, 0x3f, 0xab,
	0x2e, 0xf5, 0x2f, 0xaa, 0x75, 0x90, 0xfe, 0x8c, 0x91, 0x22, 0x64, 0x9f, 0xe3, 0x45, 0xb2, 0xdb,
	0x65, 0xc8, 0x85, 0x76, 0xef, 0x0c, 0x63, 0x73, 0x3b, 0x99, 0xbb, 0x82, 0x7c, 0x18, 0x9d, 0x13,
	0xb7, 0xda, 0x3d, 0x2f, 0x44, 0x7f, 0xc2, 0xc5, 0x96, 0x21, 0x77, 0x1c, 0xb5, 0x57, 0xb2, 0x6c,
	0x23, 0x9f, 0x82, 0x98, 0x92, 0xb6, 0xcc, 0x09, 0x75, 0x67, 0xa1, 0x40, 0x9d, 0x53, 0x0c, 0xa8,
	0x7d, 0xda, 0x67, 0xda, 0x59, 0xd9, 0x86, 0x85, 0xb4, 0xb6, 0x47, 0xed, 0x5e, 0xdb, 0xc1, 0xf3,
	0xbf, 0x40, 0x44, 0x12, 0xa1, 0x83, 0xe7, 0x0c, 0x91, 0xdb, 0xfa, 0x28, 0x40, 0x61, 0xd0, 0x35,
	0x05, 0x19, 0xbd, 0x25, 0xfd, 0x47, 0xae, 0x81, 0x68, 0xa8, 0x8f, 0xf7, 0x55, 0xd3, 0xea, 0x34,
	0xb5, 0xf6, 0xee, 0xc3, 0xa6, 0x22, 0xfd, 0x9a, 0x26, 0x04, 0xca, 0xed, 0xa6, 0xa2, 0xea, 0x4d,
	0xa5, 0x73, 0x60, 0xe8, 0x5a, 0x43, 0xfa, 0x94, 0x8f, 0x2a, 0x59, 0xac, 0xa3, 0xe9, 0x56, 0x47,
	0x7d, 0xd2, 0x34, 0x2d, 0xe9, 0x73, 0x9e, 0x94, 0x21, 0xaf, 0xdc, 0xef, 0xa8, 0x86, 0xa1, 0x1b,
	0xd2, 0x17, 0x91, 0x88, 0x00, 0xca, 0xae, 0xb5, 0x9b, 0x04, 0xbe, 0x8a, 0x64, 0x16, 0x4a, 0xa6,
	0x6a, 0xb4, 0x55, 0x23, 0x09, 0x7d, 0x13, 0x49, 0x09, 0xa6, 0xf7, 0xb5, 0x96, 0xa6, 0x1f, 0x68,
	0xd2, 0xbb, 0xc5, 0x08, 0xa5, 0xa9, 0xd6, 0x81, 0x6e, 0xb4, 0x92, 0x8a, 0xf7, 0x8b, 0xac, 0xe9,
	0xd0, 0xb4, 0xd4, 0x47, 0x49, 0xe8, 0xc3, 0x62, 0xfd, 0xe7, 0xff, 0x50, 0x62, 0x3b, 0x63, 0xa2,
	0x1f, 0x3a, 0xc7, 0x48, 0x10, 0x0a, 0x0d, 0xa4, 0xc9, 0x90, 0xcd, 0x27, 0xbb, 0x92, 0xfe, 0x2f,
	0x54, 0xab, 0x57, 0xe1, 0xa1, 0xf9, 0x97, 0x6f, 0xbd, 0xf9, 0xfe, 0xe3, 0x6d, 0x66, 0x8d, 0xac,
	0xd6, 0xc2, 0xdb, 0xc9, 0x5d, 0x75, 0x82, 0x34, 0x1e, 0xd2, 0xda, 0xcb, 0x44, 0xe1, 0x35, 0x39,
	0x82, 0x7c, 0x03, 0x69, 0x3c, 0x45, 0x63, 0x28, 0x4b, 0xa3, 0x28, 0xac, 0x43, 0xbe, 0xc9, 0x20,
	0xd7, 0xc9, 0x4a, 0x0a, 0xc2, 0x86, 0x8a, 0x63, 0x1c, 0x42, 0xae, 0x81, 0xd4, 0x32, 0xc7, 0x01,
	0x16, 0x46, 0x01, 0x2c, 0x53, 0xde, 0x60, 0xea, 0xcb, 0x64, 0x29, 0xa5, 0x4e, 0x03, 0x4e, 0xda,
	0x85, 0x52, 0x24, 0x7d, 0x35, 0x4d, 0x63, 0x08, 0xab, 0x23, 0x09, 0x97, 0x5d, 0xf2, 0x26, 0x03,
	0xc9, 0x64, 0x3d, 0x0d, 0xba, 0x1c, 0x30, 0x8e, 0x67, 0x43, 0x91, 0xbf, 0x6b, 0x97, 0xd2, 0x38,
	0x2e, 0x35, 0x74, 0x36, 0x5c, 0x4e, 0x5e, 0x66, 0xbc, 0x79, 0x59, 0x1a, 0xf0, 0xba, 0x2c, 0xbd,
	0x23, 0x6c, 0x91, 0x67, 0x90, 0x37, 0x91, 0x8e, 0xd4, 0xe7, 0xee, 0xd3, 0x21, 0x7d, 0x2e, 0x37,
	0x4a, 0xff, 0x8c, 0xa5, 0x77, 0x84, 0xad, 0xa3, 0x29, 0xf6, 0x1d, 0xba, 0xf3, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xf3, 0x5d, 0xb1, 0x17, 0xc8, 0x06, 0x00, 0x00,
}
