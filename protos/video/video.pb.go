// Code generated by protoc-gen-go.
// source: protos/video/video.proto
// DO NOT EDIT!

/*
Package video is a generated protocol buffer package.

It is generated from these files:
	protos/video/video.proto

It has these top-level messages:
	ResponseListUserID
	RequestAddUserID
	RequesDeleteUserID
	RequestGetPromoteVideo
	ResponseGetPromoteVideo
	RequestAddCommentsVideoID
	ResponseGeneral
	RequestRemoveCommentsVideoID
	ResponseListCommentsVideo
	CommentsVideo
	RequestDeleteVideo
	RequestUpdateVideo
	RequestVideoID
	ResponseVideoDetail
	ResponseVideoCover
	ResponseVideoTS
	ResponseVideoTotalView
*/
package video

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_NOT_OK ErrorCode = 0
	ErrorCode_OK     ErrorCode = 200
	// client
	ErrorCode_REQUEST_INVALID ErrorCode = 1000
	// server response
	ErrorCode_VIDEOID_WRONG   ErrorCode = 1100
	ErrorCode_VIDEO_NOT_EXIST ErrorCode = 1101
	// server - Generic error for client
	ErrorCode_DB_ERROR     ErrorCode = 2000
	ErrorCode_DATA_ERROR   ErrorCode = 2001
	ErrorCode_SERVER_ERROR ErrorCode = 2002
	// general - unknown
	ErrorCode_UNKNOWN       ErrorCode = 3000
	ErrorCode_NETWORK_ERROR ErrorCode = 3001
	ErrorCode_SYSTEM_ERROR  ErrorCode = 3002
)

var ErrorCode_name = map[int32]string{
	0:    "NOT_OK",
	200:  "OK",
	1000: "REQUEST_INVALID",
	1100: "VIDEOID_WRONG",
	1101: "VIDEO_NOT_EXIST",
	2000: "DB_ERROR",
	2001: "DATA_ERROR",
	2002: "SERVER_ERROR",
	3000: "UNKNOWN",
	3001: "NETWORK_ERROR",
	3002: "SYSTEM_ERROR",
}
var ErrorCode_value = map[string]int32{
	"NOT_OK":          0,
	"OK":              200,
	"REQUEST_INVALID": 1000,
	"VIDEOID_WRONG":   1100,
	"VIDEO_NOT_EXIST": 1101,
	"DB_ERROR":        2000,
	"DATA_ERROR":      2001,
	"SERVER_ERROR":    2002,
	"UNKNOWN":         3000,
	"NETWORK_ERROR":   3001,
	"SYSTEM_ERROR":    3002,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Like of Video
type ResponseListUserID struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	UserID      []string  `protobuf:"bytes,3,rep,name=UserID" json:"UserID,omitempty"`
}

func (m *ResponseListUserID) Reset()                    { *m = ResponseListUserID{} }
func (m *ResponseListUserID) String() string            { return proto.CompactTextString(m) }
func (*ResponseListUserID) ProtoMessage()               {}
func (*ResponseListUserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestAddUserID struct {
	VideoID string   `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	UserID  []string `protobuf:"bytes,2,rep,name=UserID" json:"UserID,omitempty"`
}

func (m *RequestAddUserID) Reset()                    { *m = RequestAddUserID{} }
func (m *RequestAddUserID) String() string            { return proto.CompactTextString(m) }
func (*RequestAddUserID) ProtoMessage()               {}
func (*RequestAddUserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RequesDeleteUserID struct {
	VideoID string   `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	UserID  []string `protobuf:"bytes,2,rep,name=UserID" json:"UserID,omitempty"`
}

func (m *RequesDeleteUserID) Reset()                    { *m = RequesDeleteUserID{} }
func (m *RequesDeleteUserID) String() string            { return proto.CompactTextString(m) }
func (*RequesDeleteUserID) ProtoMessage()               {}
func (*RequesDeleteUserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RequestGetPromoteVideo struct {
}

func (m *RequestGetPromoteVideo) Reset()                    { *m = RequestGetPromoteVideo{} }
func (m *RequestGetPromoteVideo) String() string            { return proto.CompactTextString(m) }
func (*RequestGetPromoteVideo) ProtoMessage()               {}
func (*RequestGetPromoteVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ResponseGetPromoteVideo struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	VideoID     string    `protobuf:"bytes,3,opt,name=VideoID" json:"VideoID,omitempty"`
}

func (m *ResponseGetPromoteVideo) Reset()                    { *m = ResponseGetPromoteVideo{} }
func (m *ResponseGetPromoteVideo) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetPromoteVideo) ProtoMessage()               {}
func (*ResponseGetPromoteVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RequestAddCommentsVideoID struct {
	VideoID      string           `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	CommentScore []*CommentsVideo `protobuf:"bytes,2,rep,name=comment_score" json:"comment_score,omitempty"`
}

func (m *RequestAddCommentsVideoID) Reset()                    { *m = RequestAddCommentsVideoID{} }
func (m *RequestAddCommentsVideoID) String() string            { return proto.CompactTextString(m) }
func (*RequestAddCommentsVideoID) ProtoMessage()               {}
func (*RequestAddCommentsVideoID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestAddCommentsVideoID) GetCommentScore() []*CommentsVideo {
	if m != nil {
		return m.CommentScore
	}
	return nil
}

type ResponseGeneral struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *ResponseGeneral) Reset()                    { *m = ResponseGeneral{} }
func (m *ResponseGeneral) String() string            { return proto.CompactTextString(m) }
func (*ResponseGeneral) ProtoMessage()               {}
func (*ResponseGeneral) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RequestRemoveCommentsVideoID struct {
	VideoID string   `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	Comment []string `protobuf:"bytes,2,rep,name=comment" json:"comment,omitempty"`
}

func (m *RequestRemoveCommentsVideoID) Reset()                    { *m = RequestRemoveCommentsVideoID{} }
func (m *RequestRemoveCommentsVideoID) String() string            { return proto.CompactTextString(m) }
func (*RequestRemoveCommentsVideoID) ProtoMessage()               {}
func (*RequestRemoveCommentsVideoID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ResponseListCommentsVideo struct {
	Error       ErrorCode        `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Comment     []*CommentsVideo `protobuf:"bytes,3,rep,name=comment" json:"comment,omitempty"`
}

func (m *ResponseListCommentsVideo) Reset()                    { *m = ResponseListCommentsVideo{} }
func (m *ResponseListCommentsVideo) String() string            { return proto.CompactTextString(m) }
func (*ResponseListCommentsVideo) ProtoMessage()               {}
func (*ResponseListCommentsVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ResponseListCommentsVideo) GetComment() []*CommentsVideo {
	if m != nil {
		return m.Comment
	}
	return nil
}

type CommentsVideo struct {
	CommentID string `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
	Score     string `protobuf:"bytes,2,opt,name=score" json:"score,omitempty"`
}

func (m *CommentsVideo) Reset()                    { *m = CommentsVideo{} }
func (m *CommentsVideo) String() string            { return proto.CompactTextString(m) }
func (*CommentsVideo) ProtoMessage()               {}
func (*CommentsVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RequestDeleteVideo struct {
	VideoID string            `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	Field   map[string]string `protobuf:"bytes,2,rep,name=field" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RequestDeleteVideo) Reset()                    { *m = RequestDeleteVideo{} }
func (m *RequestDeleteVideo) String() string            { return proto.CompactTextString(m) }
func (*RequestDeleteVideo) ProtoMessage()               {}
func (*RequestDeleteVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RequestDeleteVideo) GetField() map[string]string {
	if m != nil {
		return m.Field
	}
	return nil
}

type RequestUpdateVideo struct {
	VideoID string            `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
	Field   map[string]string `protobuf:"bytes,2,rep,name=field" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RequestUpdateVideo) Reset()                    { *m = RequestUpdateVideo{} }
func (m *RequestUpdateVideo) String() string            { return proto.CompactTextString(m) }
func (*RequestUpdateVideo) ProtoMessage()               {}
func (*RequestUpdateVideo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RequestUpdateVideo) GetField() map[string]string {
	if m != nil {
		return m.Field
	}
	return nil
}

type RequestVideoID struct {
	VideoID string `protobuf:"bytes,1,opt,name=VideoID" json:"VideoID,omitempty"`
}

func (m *RequestVideoID) Reset()                    { *m = RequestVideoID{} }
func (m *RequestVideoID) String() string            { return proto.CompactTextString(m) }
func (*RequestVideoID) ProtoMessage()               {}
func (*RequestVideoID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ResponseVideoDetail struct {
	Error       ErrorCode         `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	VideoDetail map[string]string `protobuf:"bytes,3,rep,name=video_detail" json:"video_detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResponseVideoDetail) Reset()                    { *m = ResponseVideoDetail{} }
func (m *ResponseVideoDetail) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoDetail) ProtoMessage()               {}
func (*ResponseVideoDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ResponseVideoDetail) GetVideoDetail() map[string]string {
	if m != nil {
		return m.VideoDetail
	}
	return nil
}

type ResponseVideoCover struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Cover       string    `protobuf:"bytes,3,opt,name=cover" json:"cover,omitempty"`
}

func (m *ResponseVideoCover) Reset()                    { *m = ResponseVideoCover{} }
func (m *ResponseVideoCover) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoCover) ProtoMessage()               {}
func (*ResponseVideoCover) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ResponseVideoTS struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Timestamp   int64     `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ResponseVideoTS) Reset()                    { *m = ResponseVideoTS{} }
func (m *ResponseVideoTS) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoTS) ProtoMessage()               {}
func (*ResponseVideoTS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ResponseVideoTotalView struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=video.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Totalview   int32     `protobuf:"varint,3,opt,name=totalview" json:"totalview,omitempty"`
}

func (m *ResponseVideoTotalView) Reset()                    { *m = ResponseVideoTotalView{} }
func (m *ResponseVideoTotalView) String() string            { return proto.CompactTextString(m) }
func (*ResponseVideoTotalView) ProtoMessage()               {}
func (*ResponseVideoTotalView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*ResponseListUserID)(nil), "video.ResponseListUserID")
	proto.RegisterType((*RequestAddUserID)(nil), "video.RequestAddUserID")
	proto.RegisterType((*RequesDeleteUserID)(nil), "video.RequesDeleteUserID")
	proto.RegisterType((*RequestGetPromoteVideo)(nil), "video.RequestGetPromoteVideo")
	proto.RegisterType((*ResponseGetPromoteVideo)(nil), "video.ResponseGetPromoteVideo")
	proto.RegisterType((*RequestAddCommentsVideoID)(nil), "video.RequestAddCommentsVideoID")
	proto.RegisterType((*ResponseGeneral)(nil), "video.ResponseGeneral")
	proto.RegisterType((*RequestRemoveCommentsVideoID)(nil), "video.RequestRemoveCommentsVideoID")
	proto.RegisterType((*ResponseListCommentsVideo)(nil), "video.ResponseListCommentsVideo")
	proto.RegisterType((*CommentsVideo)(nil), "video.CommentsVideo")
	proto.RegisterType((*RequestDeleteVideo)(nil), "video.RequestDeleteVideo")
	proto.RegisterType((*RequestUpdateVideo)(nil), "video.RequestUpdateVideo")
	proto.RegisterType((*RequestVideoID)(nil), "video.RequestVideoID")
	proto.RegisterType((*ResponseVideoDetail)(nil), "video.ResponseVideoDetail")
	proto.RegisterType((*ResponseVideoCover)(nil), "video.ResponseVideoCover")
	proto.RegisterType((*ResponseVideoTS)(nil), "video.ResponseVideoTS")
	proto.RegisterType((*ResponseVideoTotalView)(nil), "video.ResponseVideoTotalView")
	proto.RegisterEnum("video.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VideoService service

type VideoServiceClient interface {
	// Search returns a Google search result for the query.
	GetVideoDetail(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoDetail, error)
	GetVideoCover(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoCover, error)
	GetVideoTS(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTS, error)
	GetVideoTotalView(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTotalView, error)
	// Delete video, delete field
	DeleteVideoDetail(ctx context.Context, in *RequestDeleteVideo, opts ...grpc.CallOption) (*ResponseGeneral, error)
	// Set videoDetail, field, update field
	SetVideoDetail(ctx context.Context, in *RequestUpdateVideo, opts ...grpc.CallOption) (*ResponseGeneral, error)
	// Video comments
	GetListCommentsVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseListCommentsVideo, error)
	AddCommentsVideo(ctx context.Context, in *RequestAddCommentsVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	RemoveCommentsVideo(ctx context.Context, in *RequestRemoveCommentsVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	// Video promote
	GetPromoteVideo(ctx context.Context, in *RequestGetPromoteVideo, opts ...grpc.CallOption) (*ResponseGetPromoteVideo, error)
	SetPromoteVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	// Like of video
	GetListUserIDLikeVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseListUserID, error)
	AddUserIDToListLikeVideo(ctx context.Context, in *RequestAddUserID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	DeleteUserIDFromListLikeVideo(ctx context.Context, in *RequesDeleteUserID, opts ...grpc.CallOption) (*ResponseGeneral, error)
}

type videoServiceClient struct {
	cc *grpc.ClientConn
}

func NewVideoServiceClient(cc *grpc.ClientConn) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetVideoDetail(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoDetail, error) {
	out := new(ResponseVideoDetail)
	err := grpc.Invoke(ctx, "/video.VideoService/GetVideoDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoCover(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoCover, error) {
	out := new(ResponseVideoCover)
	err := grpc.Invoke(ctx, "/video.VideoService/GetVideoCover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoTS(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTS, error) {
	out := new(ResponseVideoTS)
	err := grpc.Invoke(ctx, "/video.VideoService/GetVideoTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoTotalView(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseVideoTotalView, error) {
	out := new(ResponseVideoTotalView)
	err := grpc.Invoke(ctx, "/video.VideoService/GetVideoTotalView", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteVideoDetail(ctx context.Context, in *RequestDeleteVideo, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/DeleteVideoDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) SetVideoDetail(ctx context.Context, in *RequestUpdateVideo, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/SetVideoDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetListCommentsVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseListCommentsVideo, error) {
	out := new(ResponseListCommentsVideo)
	err := grpc.Invoke(ctx, "/video.VideoService/GetListCommentsVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) AddCommentsVideo(ctx context.Context, in *RequestAddCommentsVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/AddCommentsVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) RemoveCommentsVideo(ctx context.Context, in *RequestRemoveCommentsVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/RemoveCommentsVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetPromoteVideo(ctx context.Context, in *RequestGetPromoteVideo, opts ...grpc.CallOption) (*ResponseGetPromoteVideo, error) {
	out := new(ResponseGetPromoteVideo)
	err := grpc.Invoke(ctx, "/video.VideoService/GetPromoteVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) SetPromoteVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/SetPromoteVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetListUserIDLikeVideo(ctx context.Context, in *RequestVideoID, opts ...grpc.CallOption) (*ResponseListUserID, error) {
	out := new(ResponseListUserID)
	err := grpc.Invoke(ctx, "/video.VideoService/GetListUserIDLikeVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) AddUserIDToListLikeVideo(ctx context.Context, in *RequestAddUserID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/AddUserIDToListLikeVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteUserIDFromListLikeVideo(ctx context.Context, in *RequesDeleteUserID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/video.VideoService/DeleteUserIDFromListLikeVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceServer interface {
	// Search returns a Google search result for the query.
	GetVideoDetail(context.Context, *RequestVideoID) (*ResponseVideoDetail, error)
	GetVideoCover(context.Context, *RequestVideoID) (*ResponseVideoCover, error)
	GetVideoTS(context.Context, *RequestVideoID) (*ResponseVideoTS, error)
	GetVideoTotalView(context.Context, *RequestVideoID) (*ResponseVideoTotalView, error)
	// Delete video, delete field
	DeleteVideoDetail(context.Context, *RequestDeleteVideo) (*ResponseGeneral, error)
	// Set videoDetail, field, update field
	SetVideoDetail(context.Context, *RequestUpdateVideo) (*ResponseGeneral, error)
	// Video comments
	GetListCommentsVideo(context.Context, *RequestVideoID) (*ResponseListCommentsVideo, error)
	AddCommentsVideo(context.Context, *RequestAddCommentsVideoID) (*ResponseGeneral, error)
	RemoveCommentsVideo(context.Context, *RequestRemoveCommentsVideoID) (*ResponseGeneral, error)
	// Video promote
	GetPromoteVideo(context.Context, *RequestGetPromoteVideo) (*ResponseGetPromoteVideo, error)
	SetPromoteVideo(context.Context, *RequestVideoID) (*ResponseGeneral, error)
	// Like of video
	GetListUserIDLikeVideo(context.Context, *RequestVideoID) (*ResponseListUserID, error)
	AddUserIDToListLikeVideo(context.Context, *RequestAddUserID) (*ResponseGeneral, error)
	DeleteUserIDFromListLikeVideo(context.Context, *RequesDeleteUserID) (*ResponseGeneral, error)
}

func RegisterVideoServiceServer(s *grpc.Server, srv VideoServiceServer) {
	s.RegisterService(&_VideoService_serviceDesc, srv)
}

func _VideoService_GetVideoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetVideoDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoDetail(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetVideoCover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoCover(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetVideoTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoTS(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoTotalView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoTotalView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetVideoTotalView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoTotalView(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteVideoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/DeleteVideoDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideoDetail(ctx, req.(*RequestDeleteVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_SetVideoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).SetVideoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/SetVideoDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).SetVideoDetail(ctx, req.(*RequestUpdateVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetListCommentsVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetListCommentsVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetListCommentsVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetListCommentsVideo(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_AddCommentsVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddCommentsVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).AddCommentsVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/AddCommentsVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).AddCommentsVideo(ctx, req.(*RequestAddCommentsVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_RemoveCommentsVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveCommentsVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).RemoveCommentsVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/RemoveCommentsVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).RemoveCommentsVideo(ctx, req.(*RequestRemoveCommentsVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetPromoteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetPromoteVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetPromoteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetPromoteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetPromoteVideo(ctx, req.(*RequestGetPromoteVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_SetPromoteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).SetPromoteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/SetPromoteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).SetPromoteVideo(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetListUserIDLikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetListUserIDLikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetListUserIDLikeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetListUserIDLikeVideo(ctx, req.(*RequestVideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_AddUserIDToListLikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).AddUserIDToListLikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/AddUserIDToListLikeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).AddUserIDToListLikeVideo(ctx, req.(*RequestAddUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteUserIDFromListLikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequesDeleteUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteUserIDFromListLikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/DeleteUserIDFromListLikeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteUserIDFromListLikeVideo(ctx, req.(*RequesDeleteUserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoDetail",
			Handler:    _VideoService_GetVideoDetail_Handler,
		},
		{
			MethodName: "GetVideoCover",
			Handler:    _VideoService_GetVideoCover_Handler,
		},
		{
			MethodName: "GetVideoTS",
			Handler:    _VideoService_GetVideoTS_Handler,
		},
		{
			MethodName: "GetVideoTotalView",
			Handler:    _VideoService_GetVideoTotalView_Handler,
		},
		{
			MethodName: "DeleteVideoDetail",
			Handler:    _VideoService_DeleteVideoDetail_Handler,
		},
		{
			MethodName: "SetVideoDetail",
			Handler:    _VideoService_SetVideoDetail_Handler,
		},
		{
			MethodName: "GetListCommentsVideo",
			Handler:    _VideoService_GetListCommentsVideo_Handler,
		},
		{
			MethodName: "AddCommentsVideo",
			Handler:    _VideoService_AddCommentsVideo_Handler,
		},
		{
			MethodName: "RemoveCommentsVideo",
			Handler:    _VideoService_RemoveCommentsVideo_Handler,
		},
		{
			MethodName: "GetPromoteVideo",
			Handler:    _VideoService_GetPromoteVideo_Handler,
		},
		{
			MethodName: "SetPromoteVideo",
			Handler:    _VideoService_SetPromoteVideo_Handler,
		},
		{
			MethodName: "GetListUserIDLikeVideo",
			Handler:    _VideoService_GetListUserIDLikeVideo_Handler,
		},
		{
			MethodName: "AddUserIDToListLikeVideo",
			Handler:    _VideoService_AddUserIDToListLikeVideo_Handler,
		},
		{
			MethodName: "DeleteUserIDFromListLikeVideo",
			Handler:    _VideoService_DeleteUserIDFromListLikeVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protos/video/video.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x97, 0x4d, 0x53, 0xdb, 0x46,
	0x18, 0xc7, 0x6b, 0x3c, 0xe6, 0xe5, 0x01, 0x23, 0xb1, 0x10, 0xfc, 0x52, 0xa0, 0xce, 0x86, 0xb4,
	0x14, 0x32, 0x78, 0x02, 0xd3, 0x99, 0x4e, 0x4e, 0xa5, 0x58, 0x61, 0x3c, 0x50, 0xbb, 0x95, 0x04,
	0x94, 0x5c, 0x5c, 0x05, 0x6d, 0x19, 0x05, 0xd9, 0xeb, 0x48, 0x8b, 0x93, 0x4c, 0x27, 0x97, 0x9e,
	0x7a, 0xef, 0x97, 0x49, 0x7b, 0xec, 0x29, 0x87, 0x76, 0xa6, 0x2f, 0x5f, 0xa1, 0x87, 0x7e, 0x8c,
	0xce, 0xae, 0xd6, 0x96, 0x64, 0x49, 0x49, 0xea, 0x5e, 0x18, 0x6b, 0xb5, 0xff, 0xe7, 0xf7, 0x3c,
	0xab, 0xff, 0xee, 0x3e, 0x40, 0xb9, 0xef, 0x51, 0x46, 0xfd, 0xfa, 0xc0, 0xb1, 0x09, 0x0d, 0xfe,
	0xee, 0x8a, 0x21, 0x54, 0x10, 0x0f, 0xd5, 0xb5, 0x2b, 0x4a, 0xaf, 0x5c, 0x52, 0xb7, 0xfa, 0x4e,
	0xdd, 0xea, 0xf5, 0x28, 0xb3, 0x98, 0x43, 0x7b, 0x7e, 0x30, 0x09, 0x3f, 0x02, 0xa4, 0x13, 0xbf,
	0x4f, 0x7b, 0x3e, 0x39, 0x71, 0x7c, 0x76, 0xea, 0x13, 0xaf, 0xd9, 0x40, 0x1f, 0x40, 0x81, 0x78,
	0x1e, 0xf5, 0xca, 0xb9, 0x5a, 0x6e, 0x6b, 0x71, 0x4f, 0xdd, 0x0d, 0xe2, 0x6a, 0x7c, 0xec, 0x90,
	0xda, 0x04, 0x2d, 0xc3, 0xbc, 0x4d, 0xfc, 0x4b, 0xcf, 0xe9, 0xf3, 0x60, 0xe5, 0xa9, 0x5a, 0x6e,
	0x6b, 0x0e, 0x2d, 0xc2, 0x74, 0xa0, 0x2f, 0xe7, 0x6b, 0xf9, 0xad, 0x39, 0xbc, 0x0f, 0xaa, 0x4e,
	0x9e, 0xde, 0x10, 0x9f, 0x1d, 0xd8, 0xb6, 0x8c, 0xac, 0xc0, 0xcc, 0x19, 0x8f, 0xd5, 0x6c, 0x88,
	0xd8, 0x51, 0xd1, 0x94, 0x10, 0x7d, 0xc2, 0x13, 0xe2, 0xa2, 0x06, 0x71, 0x09, 0x23, 0xef, 0x2a,
	0x2b, 0xc3, 0xaa, 0x64, 0x1d, 0x11, 0xf6, 0xa5, 0x47, 0xbb, 0x94, 0x11, 0xa1, 0xc0, 0xdf, 0x40,
	0x69, 0x58, 0xe1, 0xd8, 0xab, 0x09, 0xcb, 0x8c, 0xe4, 0x92, 0xe7, 0x03, 0xf8, 0x02, 0x2a, 0x61,
	0x9d, 0x87, 0xb4, 0xdb, 0x25, 0x3d, 0xe6, 0xcb, 0x29, 0xc9, 0xcc, 0x77, 0xa0, 0x78, 0x19, 0xcc,
	0xe9, 0xf8, 0x97, 0xd4, 0x23, 0xa2, 0x80, 0xf9, 0xbd, 0x15, 0x09, 0x8f, 0xe9, 0xf1, 0x11, 0x28,
	0x61, 0xf2, 0x3d, 0xe2, 0x59, 0xee, 0x64, 0x49, 0xe3, 0xcf, 0x60, 0x4d, 0xe6, 0xa8, 0x93, 0x2e,
	0x1d, 0x90, 0xb7, 0xa6, 0xa9, 0xc0, 0x8c, 0x4c, 0x53, 0xae, 0xf0, 0x73, 0x5e, 0x65, 0xe8, 0x94,
	0x58, 0x80, 0x09, 0x57, 0xf2, 0x6e, 0xc8, 0xc8, 0xbf, 0x61, 0x11, 0xee, 0x43, 0x31, 0x4e, 0x5b,
	0x82, 0x39, 0xa9, 0x1b, 0xa5, 0x5b, 0x84, 0xc2, 0x70, 0x35, 0x79, 0xb9, 0x3f, 0xe4, 0x86, 0x36,
	0x62, 0x81, 0x8f, 0x02, 0x61, 0xa2, 0xca, 0x7d, 0x28, 0x7c, 0xeb, 0x10, 0xd7, 0x96, 0x1f, 0x61,
	0x53, 0xf2, 0x93, 0xd2, 0xdd, 0x87, 0x7c, 0x9a, 0xd6, 0x63, 0xde, 0x8b, 0xea, 0x3d, 0x80, 0xf0,
	0x09, 0xcd, 0x43, 0xfe, 0x9a, 0xbc, 0x08, 0xd3, 0x18, 0x58, 0xee, 0x8d, 0x4c, 0xe3, 0xc1, 0xd4,
	0xa7, 0xb9, 0x68, 0x2a, 0xa7, 0x7d, 0xdb, 0x9a, 0x30, 0x95, 0x88, 0x74, 0xf2, 0x54, 0x6e, 0xc3,
	0xa2, 0x0c, 0x97, 0xf5, 0xd9, 0xf1, 0x2f, 0x39, 0x58, 0x1e, 0x7e, 0x66, 0xf1, 0xa6, 0x41, 0x98,
	0xe5, 0x4c, 0xe8, 0x3a, 0x74, 0x00, 0x0b, 0x62, 0x5e, 0xc7, 0x16, 0x51, 0xe4, 0x57, 0xde, 0x19,
	0x95, 0x96, 0xe0, 0xec, 0x46, 0x7e, 0x07, 0x15, 0xee, 0x81, 0x3a, 0x3e, 0xf6, 0xd6, 0x3a, 0x2f,
	0xc2, 0x43, 0x4d, 0x68, 0x0f, 0xe9, 0x80, 0x78, 0x13, 0x96, 0x50, 0x84, 0xc2, 0x25, 0x97, 0xcb,
	0xbd, 0xfe, 0x28, 0xdc, 0x90, 0x22, 0xb4, 0x69, 0x4c, 0x18, 0x77, 0x09, 0xe6, 0x98, 0xd3, 0x25,
	0x3e, 0xb3, 0xba, 0x7d, 0x11, 0x3b, 0x8f, 0x2d, 0x7e, 0x86, 0x45, 0x63, 0x53, 0x66, 0xb9, 0x67,
	0x0e, 0x79, 0xf6, 0x3f, 0x10, 0x3c, 0xc4, 0xc0, 0x21, 0xcf, 0x04, 0xa2, 0xb0, 0xfd, 0x3a, 0x07,
	0x73, 0xa1, 0x0a, 0x60, 0xba, 0xd5, 0x36, 0x3b, 0xed, 0x63, 0xf5, 0x3d, 0x34, 0x03, 0x53, 0xed,
	0x63, 0xf5, 0x75, 0x0e, 0xad, 0x80, 0xa2, 0x6b, 0x5f, 0x9d, 0x6a, 0x86, 0xd9, 0x69, 0xb6, 0xce,
	0x0e, 0x4e, 0x9a, 0x0d, 0xf5, 0x9f, 0x19, 0x84, 0xa0, 0x78, 0xd6, 0x6c, 0x68, 0xed, 0x66, 0xa3,
	0x73, 0xae, 0xb7, 0x5b, 0x47, 0xea, 0xaf, 0xb3, 0x7c, 0xa6, 0x18, 0xeb, 0xf0, 0x20, 0xda, 0xd7,
	0x4d, 0xc3, 0x54, 0x7f, 0x9b, 0x45, 0x45, 0x98, 0x6d, 0x7c, 0xde, 0xd1, 0x74, 0xbd, 0xad, 0xab,
	0xbf, 0x2b, 0x48, 0x01, 0x68, 0x1c, 0x98, 0x07, 0x72, 0xe0, 0x0f, 0x05, 0x2d, 0xc1, 0x82, 0xa1,
	0xe9, 0x67, 0x9a, 0x2e, 0x87, 0xfe, 0x54, 0xd0, 0x02, 0xcc, 0x9c, 0xb6, 0x8e, 0x5b, 0xed, 0xf3,
	0x96, 0xfa, 0xaa, 0xc4, 0x51, 0x2d, 0xcd, 0x3c, 0x6f, 0xeb, 0xc7, 0x72, 0xc6, 0x4f, 0x25, 0x21,
	0xba, 0x30, 0x4c, 0xed, 0x0b, 0x39, 0xf4, 0x73, 0x69, 0xef, 0xd5, 0x02, 0x2c, 0x88, 0x65, 0x32,
	0x88, 0x37, 0x70, 0x2e, 0x09, 0x7a, 0x0a, 0x8b, 0x47, 0x84, 0x45, 0x4d, 0x7b, 0x2b, 0xbe, 0x87,
	0xa4, 0xd3, 0xab, 0xd5, 0x6c, 0xff, 0xe1, 0x7b, 0xdf, 0xff, 0xf5, 0xf7, 0x8f, 0x53, 0x1f, 0xa2,
	0xcd, 0xfa, 0xe0, 0xbe, 0xbc, 0x53, 0x03, 0xef, 0xd6, 0xaf, 0x08, 0x93, 0xbf, 0xbe, 0x93, 0x81,
	0x5e, 0xa2, 0x1e, 0x14, 0x87, 0xc8, 0xc0, 0x63, 0x19, 0xc4, 0x4a, 0x1a, 0x51, 0x28, 0xf0, 0x8e,
	0x00, 0xde, 0x45, 0x77, 0xd2, 0x80, 0xc2, 0x79, 0x11, 0x9e, 0x0b, 0x30, 0xe4, 0x99, 0x46, 0x16,
	0x6c, 0x35, 0x0d, 0x66, 0x1a, 0xb8, 0x2e, 0x48, 0x1f, 0xa3, 0x8f, 0xd2, 0x48, 0x23, 0x2f, 0x46,
	0x68, 0x37, 0xb0, 0x34, 0xa2, 0x8d, 0xac, 0x98, 0x01, 0x5d, 0x4f, 0x85, 0x0e, 0x55, 0x78, 0x5b,
	0xb0, 0x37, 0x11, 0x4e, 0x63, 0x73, 0x7f, 0x46, 0xb0, 0x4f, 0x60, 0x29, 0x72, 0xf0, 0xca, 0x4f,
	0x59, 0xc9, 0x3c, 0x99, 0x13, 0xf5, 0xca, 0x8b, 0x12, 0x63, 0xc1, 0x5c, 0xc3, 0xa5, 0x04, 0xd3,
	0x16, 0xea, 0x07, 0xb9, 0x6d, 0x74, 0x05, 0x8b, 0x46, 0xdc, 0x33, 0x95, 0xcc, 0x73, 0x77, 0x02,
	0xd0, 0x8d, 0x50, 0x73, 0xd0, 0x4b, 0x58, 0x39, 0x22, 0x2c, 0x79, 0x71, 0x66, 0x2c, 0x67, 0x6d,
	0x0c, 0x95, 0x10, 0xa6, 0x19, 0x55, 0xde, 0x89, 0x7e, 0xdd, 0x75, 0x7c, 0x66, 0xb9, 0x51, 0xa3,
	0x52, 0x50, 0xc7, 0x7b, 0x13, 0x54, 0x8b, 0xa3, 0x93, 0xbd, 0x4b, 0x66, 0xc1, 0xb7, 0x05, 0xfb,
	0x7d, 0xbc, 0x9a, 0xc2, 0xb6, 0x6c, 0x9b, 0xd7, 0xfb, 0x9c, 0x5f, 0x23, 0x89, 0x46, 0x03, 0xdd,
	0x89, 0x33, 0x53, 0x7b, 0x91, 0x4c, 0xec, 0xa6, 0xc0, 0x6e, 0xe0, 0x4a, 0x0a, 0xd6, 0x13, 0x91,
	0x38, 0x99, 0x82, 0x32, 0xde, 0xe7, 0xad, 0xc7, 0xa9, 0x63, 0xaf, 0xab, 0x1b, 0x09, 0x5e, 0xbc,
	0x83, 0x5c, 0x17, 0xdc, 0x12, 0xba, 0x15, 0x72, 0xfb, 0xc1, 0x7b, 0xee, 0x5e, 0xf4, 0x18, 0x14,
	0x63, 0x0c, 0xf8, 0x8e, 0x3b, 0x73, 0x58, 0x58, 0x4d, 0x00, 0xaa, 0x38, 0x05, 0xe0, 0x13, 0xc6,
	0x8b, 0x7a, 0x02, 0xab, 0xd2, 0x3e, 0x41, 0xd7, 0x7b, 0xe2, 0x5c, 0xbf, 0x19, 0x55, 0x49, 0x31,
	0x50, 0x20, 0xc5, 0x1b, 0x82, 0x56, 0xc6, 0xcb, 0x21, 0xcd, 0x75, 0xae, 0x89, 0x70, 0x4d, 0xc0,
	0x2a, 0x8f, 0xfa, 0x75, 0x93, 0x72, 0x61, 0x48, 0x2b, 0x25, 0x3c, 0x13, 0xcc, 0xcb, 0x2c, 0x4d,
	0xae, 0x1d, 0x46, 0x63, 0x30, 0x69, 0x13, 0x06, 0xeb, 0xd1, 0x3e, 0xff, 0xa1, 0x47, 0xbb, 0x71,
	0x60, 0x7c, 0x3b, 0x46, 0xe7, 0xfe, 0x97, 0xd5, 0x14, 0xc8, 0xd1, 0xae, 0x7f, 0x3c, 0x2d, 0xfe,
	0xf7, 0xd9, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xad, 0xdf, 0xa0, 0xb4, 0x3c, 0x0d, 0x00, 0x00,
}
