syntax = "proto3";

package video;

import "google/api/annotations.proto";

service VideoService {
  // Search returns a Google search result for the query.
  rpc GetVideoDetail(RequestVideoID) returns (ResponseVideoDetail){
	option (google.api.http) = {
       get: "/v1/video/detail/getdetail/{VideoID}"
    };
}
  rpc GetVideoCover(RequestVideoID) returns (ResponseVideoCover){
	option (google.api.http) = {
       get: "/v1/video/detail/getcover/{VideoID}"
    };
}
  rpc GetVideoTS(RequestVideoID) returns (ResponseVideoTS){
	option (google.api.http) = {
       get: "/v1/video/detail/gettimestamp/{VideoID}"
    };
}
  rpc GetVideoTotalView(RequestVideoID) returns (ResponseVideoTotalView){
	option (google.api.http) = {
       get: "/v1/video/detail/getview/{VideoID}"
    };
}

  //Delete video, delete field
  rpc DeleteVideoDetail(RequestDeleteVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/detail/delete"
	   body: "*"
    };
}

  //Set videoDetail, field, update field
  rpc SetVideoDetail(RequestUpdateVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/detail/update"
	   body: "*"
    };
  }

  //Video comments
 rpc GetListCommentsVideo(RequestVideoID) returns (ResponseListCommentsVideo){
    option (google.api.http) = {
       get: "/v1/video/comments/listall/{VideoID}"
    };
}
 rpc AddCommentsVideo(RequestAddCommentsVideoID) returns (ResponseGeneral){
   option (google.api.http) = {
       post: "/v1/video/comments/add"
	   body: "*"
    };
}
 rpc RemoveCommentsVideo(RequestRemoveCommentsVideoID) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/comments/remove"
	   body: "*"
    };
 }

 //Video promote
  rpc GetPromoteVideo(RequestGetPromoteVideo) returns (ResponseGetPromoteVideo){
	option (google.api.http) = {
       get: "/v1/video/promote/get"
    };
}
  rpc SetPromoteVideo(RequestVideoID) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/promote/set"
	   body: "*"
    };
 }

  //Like of video
 rpc GetListUserIDLikeVideo(RequestVideoID) returns (ResponseListUserID){
	option (google.api.http) = {
       post: "/v1/video/like/list"
	   body: "*"
    };
}
  rpc AddUserIDToListLikeVideo(RequestAddUserID) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/like/add"
	   body: "*"
    };
}	
  rpc DeleteUserIDFromListLikeVideo(RequesDeleteUserID) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/like/delete"
	   body: "*"
    };
}
}
//Like of Video
message ResponseListUserID {
	ErrorCode error = 1;
	string description  = 2;
	repeated string UserID = 3;
}

message RequestAddUserID {
	string VideoID = 1;
	repeated string UserID = 2;
}

message RequesDeleteUserID {
	string VideoID = 1;
	repeated string UserID = 2;
}

message RequestGetPromoteVideo{}

message ResponseGetPromoteVideo {
	ErrorCode error = 1;
	string description  = 2;
	string VideoID = 3;
}

message RequestAddCommentsVideoID {
	string VideoID = 1;
	repeated CommentsVideo comment_score = 2;
}

message ResponseGeneral {
	ErrorCode error = 1;
	string description  = 2;
}

message RequestRemoveCommentsVideoID {
	string VideoID = 1;
	repeated string comment = 2;
}

message ResponseListCommentsVideo {
	ErrorCode error = 1;
	string description  = 2;
	repeated CommentsVideo comment = 3;
}

message CommentsVideo {
	string commentID = 1;
	string score = 2;
}

message RequestDeleteVideo {
	string VideoID = 1;
	map<string, string> field = 2;
}

message RequestUpdateVideo {
	string VideoID = 1;
	map<string, string> field = 2;
}

message RequestVideoID {
	string VideoID = 1;
}

message ResponseVideoDetail {
	ErrorCode error = 1;
	string description  = 2;
	map<string, string> video_detail = 3;
}

message ResponseVideoCover {
    ErrorCode error = 1;
	string description  = 2;
	string cover = 3;
}

message ResponseVideoTS {
    ErrorCode error = 1;
	string description  = 2;
	int64 timestamp = 3;
}

message ResponseVideoTotalView {
    ErrorCode error = 1;
	string description  = 2;
	int32 totalview = 3;
}

enum ErrorCode
{
	NOT_OK = 0;
	OK = 200;

	// client
	REQUEST_INVALID = 1000;
	
	//server response
	VIDEOID_WRONG = 1100;
	VIDEO_NOT_EXIST = 1101;
	
    // server - Generic error for client
    DB_ERROR = 2000;
    DATA_ERROR = 2001;
    SERVER_ERROR = 2002;

    // general - unknown
    UNKNOWN = 3000;
    NETWORK_ERROR = 3001;
    SYSTEM_ERROR = 3002;
}