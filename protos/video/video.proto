syntax = "proto3";

package video;

import "google/api/annotations.proto";

service VideoService {
  // Search returns a Google search result for the query.
 
  rpc GetVideoDetailOne(RequestVideoDetailOne) returns (ResponseVideoDetailOne){
	option (google.api.http) = {
       post: "/v1/video/detail/getone"
	   body: "*"
    };
  }

  rpc GetVideoDetail(RequestVideoID) returns (ResponseVideoDetail){
	option (google.api.http) = {
       post: "/v1/video/detail/get"
	   body: "*"
    };
  }

  //Delete video, delete field
  rpc DeleteVideoDetail(RequestModifyVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/detail/delete"
	   body: "*"
    };
  }

  //Set videoDetail, field, update field
  rpc SetVideoDetail(RequestModifyVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/detail/set"
	   body: "*"
    };
  }

  //Video promote
  rpc GetPromoteVideo(RequestGetPromoteVideo) returns (ResponseGetPromoteVideo){
	option (google.api.http) = {
       post: "/v1/video/promote/get"
    };
  }
  rpc SetPromoteVideo(RequestVideoID) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/promote/set"
	   body: "*"
    };
  }

  //Like, Comment of video
  rpc GetListVideoOne(RequestGetListVideoOne) returns (ResponseGetListVideoOne){
	option (google.api.http) = {
       post: "/v1/video/list/getone"
	   body: "*"
    };
  }

  rpc GetListVideo(RequestGetListVideo) returns (ResponseGetListVideo){
	option (google.api.http) = {
       post: "/v1/video/list/get"
	   body: "*"
    };
  }

 rpc AddListVideo(RequestModifyListVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/like/add"
	   body: "*"
    };
  }
  rpc RemoveListVideo(RequestModifyListVideo) returns (ResponseGeneral){
	option (google.api.http) = {
       post: "/v1/video/like/remove"
	   body: "*"
    };
  }	
}

//list like, comment of video

message RequestGetListVideoOne {
	string requestID = 1;
	ListType listtype = 2;
	string member = 3;
}

message ResponseGetListVideoOne {
	ErrorCode error = 1;
	string description  = 2;
	string result = 3;
}

message RequestGetListVideo {
	string requestID = 1;
	ListType listtype = 2;
}

message ResponseGetListVideo {
	ErrorCode error = 1;
	string description  = 2;
	map<string, string> list = 3;
}

message RequestModifyListVideo {
	string requestID = 1;
	ListType listtype = 2;
	map<string, string> member_score = 3;
}

//video promote

message RequestGetPromoteVideo{}

message ResponseGetPromoteVideo {
	ErrorCode error = 1;
	string description  = 2;
	string videoID = 3;
}
//Video detail

message RequestModifyVideo {
	string VideoID = 1;
	map<string, string> field = 2;
}

message ResponseGeneral {
	ErrorCode error = 1;
	string description  = 2;
}

message RequestVideoID {
	string VideoID = 1;
}

message ResponseVideoDetail {
	ErrorCode error = 1;
	string description  = 2;
	map<string, string> video_detail = 3;
}

message ResponseVideoDetailOne {
	ErrorCode error = 1;
	string description  = 2;
	string result = 3;
}

message RequestVideoDetailOne {
	string videoID = 1;
	string field = 2;
}
enum ErrorCode
{
	NOT_OK = 0;
	OK = 200;

	// client
	REQUEST_INVALID = 1000;
	
	//server response
	VIDEOID_WRONG = 1100;
	VIDEO_NOT_EXIST = 1101;
	
    // server - Generic error for client
    DB_ERROR = 2000;
    DATA_ERROR = 2001;
    SERVER_ERROR = 2002;

    // general - unknown
    UNKNOWN = 3000;
    NETWORK_ERROR = 3001;
    SYSTEM_ERROR = 3002;
}

enum ListType {
	Comment = 0;
	CommentWithLikeWeight = 1;
}

enum VideoStatus {
	Exist = 0;
	Private = 1;
	Public = 2;
	Delete = 3;
	NotExit = -1;
}

enum TimeInTopTrend {
	NotInTop = 0;
	InTop = 1;  //time in top 100 trending
}

enum BlockTop {
	NotBlocked = 0;
	Blocked = 1;  // video is denied in any top
}