// Code generated by protoc-gen-go.
// source: protos/comment/comment.proto
// DO NOT EDIT!

/*
Package comment is a generated protocol buffer package.

It is generated from these files:
	protos/comment/comment.proto

It has these top-level messages:
	ResponseCountReply
	RequestDeleteFromListReplyComment
	RequestAddToListReplyComment
	ReplyComment
	ResponseListReply
	RequestCommentID
	ResponseGetCommentDetail
	RequestSetCommentID
	RequestDeleteCommentID
	ResponseGeneral
*/
package comment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_NOT_OK ErrorCode = 0
	ErrorCode_OK     ErrorCode = 200
	// client
	ErrorCode_REQUEST_INVALID ErrorCode = 1000
	// server response
	ErrorCode_VIDEOID_WRONG   ErrorCode = 1100
	ErrorCode_VIDEO_NOT_EXIST ErrorCode = 1101
	// server - Generic error for client
	ErrorCode_DB_ERROR     ErrorCode = 2000
	ErrorCode_DATA_ERROR   ErrorCode = 2001
	ErrorCode_SERVER_ERROR ErrorCode = 2002
	// general - unknown
	ErrorCode_UNKNOWN       ErrorCode = 3000
	ErrorCode_NETWORK_ERROR ErrorCode = 3001
	ErrorCode_SYSTEM_ERROR  ErrorCode = 3002
)

var ErrorCode_name = map[int32]string{
	0:    "NOT_OK",
	200:  "OK",
	1000: "REQUEST_INVALID",
	1100: "VIDEOID_WRONG",
	1101: "VIDEO_NOT_EXIST",
	2000: "DB_ERROR",
	2001: "DATA_ERROR",
	2002: "SERVER_ERROR",
	3000: "UNKNOWN",
	3001: "NETWORK_ERROR",
	3002: "SYSTEM_ERROR",
}
var ErrorCode_value = map[string]int32{
	"NOT_OK":          0,
	"OK":              200,
	"REQUEST_INVALID": 1000,
	"VIDEOID_WRONG":   1100,
	"VIDEO_NOT_EXIST": 1101,
	"DB_ERROR":        2000,
	"DATA_ERROR":      2001,
	"SERVER_ERROR":    2002,
	"UNKNOWN":         3000,
	"NETWORK_ERROR":   3001,
	"SYSTEM_ERROR":    3002,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResponseCountReply struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=comment.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Total       int32     `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (m *ResponseCountReply) Reset()                    { *m = ResponseCountReply{} }
func (m *ResponseCountReply) String() string            { return proto.CompactTextString(m) }
func (*ResponseCountReply) ProtoMessage()               {}
func (*ResponseCountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestDeleteFromListReplyComment struct {
	CommentID string   `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
	Reply     []string `protobuf:"bytes,2,rep,name=reply" json:"reply,omitempty"`
}

func (m *RequestDeleteFromListReplyComment) Reset()         { *m = RequestDeleteFromListReplyComment{} }
func (m *RequestDeleteFromListReplyComment) String() string { return proto.CompactTextString(m) }
func (*RequestDeleteFromListReplyComment) ProtoMessage()    {}
func (*RequestDeleteFromListReplyComment) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1}
}

type RequestAddToListReplyComment struct {
	CommentID string          `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
	Reply     []*ReplyComment `protobuf:"bytes,2,rep,name=reply" json:"reply,omitempty"`
}

func (m *RequestAddToListReplyComment) Reset()                    { *m = RequestAddToListReplyComment{} }
func (m *RequestAddToListReplyComment) String() string            { return proto.CompactTextString(m) }
func (*RequestAddToListReplyComment) ProtoMessage()               {}
func (*RequestAddToListReplyComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestAddToListReplyComment) GetReply() []*ReplyComment {
	if m != nil {
		return m.Reply
	}
	return nil
}

type ReplyComment struct {
	ReplyID string `protobuf:"bytes,1,opt,name=replyID" json:"replyID,omitempty"`
	Score   string `protobuf:"bytes,2,opt,name=score" json:"score,omitempty"`
}

func (m *ReplyComment) Reset()                    { *m = ReplyComment{} }
func (m *ReplyComment) String() string            { return proto.CompactTextString(m) }
func (*ReplyComment) ProtoMessage()               {}
func (*ReplyComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ResponseListReply struct {
	Error       ErrorCode       `protobuf:"varint,1,opt,name=error,enum=comment.ErrorCode" json:"error,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Reply       []*ReplyComment `protobuf:"bytes,3,rep,name=reply" json:"reply,omitempty"`
}

func (m *ResponseListReply) Reset()                    { *m = ResponseListReply{} }
func (m *ResponseListReply) String() string            { return proto.CompactTextString(m) }
func (*ResponseListReply) ProtoMessage()               {}
func (*ResponseListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResponseListReply) GetReply() []*ReplyComment {
	if m != nil {
		return m.Reply
	}
	return nil
}

// comment detail
type RequestCommentID struct {
	CommentID string `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
}

func (m *RequestCommentID) Reset()                    { *m = RequestCommentID{} }
func (m *RequestCommentID) String() string            { return proto.CompactTextString(m) }
func (*RequestCommentID) ProtoMessage()               {}
func (*RequestCommentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ResponseGetCommentDetail struct {
	Error         ErrorCode         `protobuf:"varint,1,opt,name=error,enum=comment.ErrorCode" json:"error,omitempty"`
	Description   string            `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	CommentDetail map[string]string `protobuf:"bytes,3,rep,name=comment_detail" json:"comment_detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResponseGetCommentDetail) Reset()                    { *m = ResponseGetCommentDetail{} }
func (m *ResponseGetCommentDetail) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetCommentDetail) ProtoMessage()               {}
func (*ResponseGetCommentDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResponseGetCommentDetail) GetCommentDetail() map[string]string {
	if m != nil {
		return m.CommentDetail
	}
	return nil
}

type RequestSetCommentID struct {
	CommentID string            `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
	Field     map[string]string `protobuf:"bytes,2,rep,name=field" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RequestSetCommentID) Reset()                    { *m = RequestSetCommentID{} }
func (m *RequestSetCommentID) String() string            { return proto.CompactTextString(m) }
func (*RequestSetCommentID) ProtoMessage()               {}
func (*RequestSetCommentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RequestSetCommentID) GetField() map[string]string {
	if m != nil {
		return m.Field
	}
	return nil
}

type RequestDeleteCommentID struct {
	CommentID string   `protobuf:"bytes,1,opt,name=commentID" json:"commentID,omitempty"`
	Field     []string `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
}

func (m *RequestDeleteCommentID) Reset()                    { *m = RequestDeleteCommentID{} }
func (m *RequestDeleteCommentID) String() string            { return proto.CompactTextString(m) }
func (*RequestDeleteCommentID) ProtoMessage()               {}
func (*RequestDeleteCommentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ResponseGeneral struct {
	Error       ErrorCode `protobuf:"varint,1,opt,name=error,enum=comment.ErrorCode" json:"error,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *ResponseGeneral) Reset()                    { *m = ResponseGeneral{} }
func (m *ResponseGeneral) String() string            { return proto.CompactTextString(m) }
func (*ResponseGeneral) ProtoMessage()               {}
func (*ResponseGeneral) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*ResponseCountReply)(nil), "comment.ResponseCountReply")
	proto.RegisterType((*RequestDeleteFromListReplyComment)(nil), "comment.RequestDeleteFromListReplyComment")
	proto.RegisterType((*RequestAddToListReplyComment)(nil), "comment.RequestAddToListReplyComment")
	proto.RegisterType((*ReplyComment)(nil), "comment.ReplyComment")
	proto.RegisterType((*ResponseListReply)(nil), "comment.ResponseListReply")
	proto.RegisterType((*RequestCommentID)(nil), "comment.RequestCommentID")
	proto.RegisterType((*ResponseGetCommentDetail)(nil), "comment.ResponseGetCommentDetail")
	proto.RegisterType((*RequestSetCommentID)(nil), "comment.RequestSetCommentID")
	proto.RegisterType((*RequestDeleteCommentID)(nil), "comment.RequestDeleteCommentID")
	proto.RegisterType((*ResponseGeneral)(nil), "comment.ResponseGeneral")
	proto.RegisterEnum("comment.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CommentService service

type CommentServiceClient interface {
	// Comment Detail
	GetCommentDetail(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseGetCommentDetail, error)
	SetCommentDetail(ctx context.Context, in *RequestSetCommentID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	DeleteCommentDetail(ctx context.Context, in *RequestDeleteCommentID, opts ...grpc.CallOption) (*ResponseGeneral, error)
	// Comment Reply
	CountReplyOfComment(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseCountReply, error)
	GetListReplyComment(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseListReply, error)
	AddToListReplyComment(ctx context.Context, in *RequestAddToListReplyComment, opts ...grpc.CallOption) (*ResponseGeneral, error)
	DeleteFromListReplyComment(ctx context.Context, in *RequestDeleteFromListReplyComment, opts ...grpc.CallOption) (*ResponseGeneral, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetCommentDetail(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseGetCommentDetail, error) {
	out := new(ResponseGetCommentDetail)
	err := grpc.Invoke(ctx, "/comment.CommentService/GetCommentDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) SetCommentDetail(ctx context.Context, in *RequestSetCommentID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/comment.CommentService/SetCommentDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentDetail(ctx context.Context, in *RequestDeleteCommentID, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/comment.CommentService/DeleteCommentDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CountReplyOfComment(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseCountReply, error) {
	out := new(ResponseCountReply)
	err := grpc.Invoke(ctx, "/comment.CommentService/CountReplyOfComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetListReplyComment(ctx context.Context, in *RequestCommentID, opts ...grpc.CallOption) (*ResponseListReply, error) {
	out := new(ResponseListReply)
	err := grpc.Invoke(ctx, "/comment.CommentService/GetListReplyComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) AddToListReplyComment(ctx context.Context, in *RequestAddToListReplyComment, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/comment.CommentService/AddToListReplyComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteFromListReplyComment(ctx context.Context, in *RequestDeleteFromListReplyComment, opts ...grpc.CallOption) (*ResponseGeneral, error) {
	out := new(ResponseGeneral)
	err := grpc.Invoke(ctx, "/comment.CommentService/DeleteFromListReplyComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentService service

type CommentServiceServer interface {
	// Comment Detail
	GetCommentDetail(context.Context, *RequestCommentID) (*ResponseGetCommentDetail, error)
	SetCommentDetail(context.Context, *RequestSetCommentID) (*ResponseGeneral, error)
	DeleteCommentDetail(context.Context, *RequestDeleteCommentID) (*ResponseGeneral, error)
	// Comment Reply
	CountReplyOfComment(context.Context, *RequestCommentID) (*ResponseCountReply, error)
	GetListReplyComment(context.Context, *RequestCommentID) (*ResponseListReply, error)
	AddToListReplyComment(context.Context, *RequestAddToListReplyComment) (*ResponseGeneral, error)
	DeleteFromListReplyComment(context.Context, *RequestDeleteFromListReplyComment) (*ResponseGeneral, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_GetCommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetCommentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentDetail(ctx, req.(*RequestCommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_SetCommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetCommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).SetCommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/SetCommentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).SetCommentDetail(ctx, req.(*RequestSetCommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteCommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/DeleteCommentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentDetail(ctx, req.(*RequestDeleteCommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CountReplyOfComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CountReplyOfComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/CountReplyOfComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CountReplyOfComment(ctx, req.(*RequestCommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetListReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetListReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/GetListReplyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetListReplyComment(ctx, req.(*RequestCommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_AddToListReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddToListReplyComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddToListReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/AddToListReplyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddToListReplyComment(ctx, req.(*RequestAddToListReplyComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteFromListReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteFromListReplyComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteFromListReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/DeleteFromListReplyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteFromListReplyComment(ctx, req.(*RequestDeleteFromListReplyComment))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentDetail",
			Handler:    _CommentService_GetCommentDetail_Handler,
		},
		{
			MethodName: "SetCommentDetail",
			Handler:    _CommentService_SetCommentDetail_Handler,
		},
		{
			MethodName: "DeleteCommentDetail",
			Handler:    _CommentService_DeleteCommentDetail_Handler,
		},
		{
			MethodName: "CountReplyOfComment",
			Handler:    _CommentService_CountReplyOfComment_Handler,
		},
		{
			MethodName: "GetListReplyComment",
			Handler:    _CommentService_GetListReplyComment_Handler,
		},
		{
			MethodName: "AddToListReplyComment",
			Handler:    _CommentService_AddToListReplyComment_Handler,
		},
		{
			MethodName: "DeleteFromListReplyComment",
			Handler:    _CommentService_DeleteFromListReplyComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protos/comment/comment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xc5, 0x89, 0xd2, 0x34, 0xb7, 0x4d, 0xe3, 0x4e, 0x28, 0x0d, 0x21, 0xa8, 0xc9, 0xb4, 0x55,
	0x43, 0x84, 0x12, 0x28, 0x15, 0x42, 0xd9, 0x85, 0xd8, 0xad, 0xa2, 0x94, 0x58, 0x38, 0x69, 0x03,
	0x62, 0x11, 0x99, 0x78, 0x5a, 0x59, 0xb8, 0x9e, 0xd4, 0x76, 0xa3, 0x96, 0x9f, 0x4d, 0x37, 0xec,
	0xd8, 0xf0, 0x32, 0xc0, 0x13, 0x74, 0x01, 0x12, 0x3f, 0x12, 0x4f, 0xc0, 0x82, 0xc7, 0xf8, 0xe4,
	0xf1, 0x38, 0x7f, 0xb6, 0xdc, 0x4f, 0x5d, 0x25, 0x73, 0x75, 0xef, 0x39, 0xe7, 0x9e, 0x7b, 0x35,
	0x63, 0x28, 0x4d, 0x6c, 0xea, 0x52, 0xa7, 0x31, 0xa6, 0x37, 0x37, 0xc4, 0x72, 0x83, 0xdf, 0x3a,
	0x0b, 0xa3, 0x34, 0x3f, 0x16, 0x4b, 0xd7, 0x94, 0x5e, 0x9b, 0xa4, 0xa1, 0x4d, 0x8c, 0x86, 0x66,
	0x59, 0xd4, 0xd5, 0x5c, 0x83, 0x5a, 0x8e, 0x9f, 0x86, 0xbf, 0x02, 0xa4, 0x12, 0x67, 0x42, 0x2d,
	0x87, 0xb4, 0xe9, 0x9d, 0xe5, 0xaa, 0x64, 0x62, 0x3e, 0xa0, 0x0a, 0xa4, 0x88, 0x6d, 0x53, 0xbb,
	0x20, 0x94, 0x85, 0xea, 0xd6, 0x31, 0xaa, 0x07, 0xd8, 0xb2, 0x17, 0x6d, 0x53, 0x9d, 0xa0, 0x3c,
	0x6c, 0xe8, 0xc4, 0x19, 0xdb, 0xc6, 0xc4, 0x83, 0x2b, 0x24, 0xca, 0x42, 0x35, 0x83, 0xb2, 0x90,
	0x72, 0xa9, 0xab, 0x99, 0x85, 0x64, 0x59, 0xa8, 0xa6, 0xb0, 0x0c, 0x15, 0x95, 0xdc, 0xde, 0x11,
	0xc7, 0x95, 0x88, 0x49, 0x5c, 0x72, 0x6a, 0xd3, 0x9b, 0x73, 0xc3, 0xf1, 0x49, 0xda, 0x3e, 0x24,
	0xda, 0x86, 0x0c, 0x47, 0xef, 0x48, 0x8c, 0x8f, 0xc1, 0xd8, 0x5e, 0x4a, 0x21, 0x51, 0x4e, 0x56,
	0x33, 0x78, 0x08, 0x25, 0x0e, 0xd3, 0xd2, 0xf5, 0x01, 0x7d, 0x1d, 0x84, 0x83, 0x45, 0x84, 0x8d,
	0xe3, 0x9d, 0x59, 0x03, 0x8b, 0x85, 0xb8, 0x0e, 0x9b, 0x4b, 0x40, 0x39, 0x48, 0xb3, 0xaa, 0x45,
	0x21, 0xce, 0x98, 0xda, 0xc4, 0x6f, 0x0f, 0xdf, 0xc2, 0x76, 0x60, 0xd6, 0x4c, 0xc4, 0x8b, 0xbd,
	0x9a, 0x49, 0x4c, 0xc6, 0x49, 0x3c, 0x04, 0x91, 0xf7, 0xde, 0x0e, 0x5a, 0x8c, 0xe8, 0x17, 0xff,
	0x2b, 0x40, 0x21, 0x90, 0x76, 0x46, 0x82, 0x5c, 0x89, 0xb8, 0x9a, 0x61, 0xbe, 0x58, 0xe1, 0x39,
	0x6c, 0xf1, 0xcc, 0x91, 0xce, 0x90, 0xb8, 0xd4, 0x93, 0x05, 0xa9, 0xd1, 0x94, 0xf5, 0xa5, 0x93,
	0x6c, 0xb9, 0xf6, 0x43, 0xf1, 0x04, 0x50, 0x38, 0x8a, 0x36, 0x20, 0xf9, 0x0d, 0x79, 0x98, 0xdb,
	0x3d, 0xd5, 0xcc, 0x3b, 0x6e, 0x77, 0x33, 0xf1, 0x89, 0x80, 0x7f, 0x12, 0x20, 0xcf, 0x0d, 0xe8,
	0x93, 0x58, 0x0f, 0xd0, 0xc7, 0x90, 0xba, 0x32, 0x88, 0xa9, 0xf3, 0x99, 0x1f, 0x2d, 0xa8, 0x0c,
	0xd5, 0xd7, 0x4f, 0xbd, 0x4c, 0x5f, 0xd8, 0xfb, 0x00, 0xf3, 0xd3, 0xb3, 0x82, 0x9a, 0xf0, 0xd6,
	0xd2, 0x4e, 0xc7, 0x4a, 0xca, 0x2e, 0x4a, 0xca, 0xe0, 0x0e, 0xe4, 0xe6, 0x8e, 0x59, 0xc4, 0xd6,
	0x5e, 0x3c, 0x9b, 0xda, 0x93, 0x00, 0x99, 0x79, 0x0a, 0xc0, 0x5a, 0x4f, 0x19, 0x8c, 0x94, 0xae,
	0xf8, 0x06, 0x4a, 0x43, 0x42, 0xe9, 0x8a, 0x4f, 0x02, 0x7a, 0x13, 0x72, 0xaa, 0xfc, 0xf9, 0x85,
	0xdc, 0x1f, 0x8c, 0x3a, 0xbd, 0xcb, 0xd6, 0x79, 0x47, 0x12, 0xff, 0x4f, 0x23, 0x04, 0xd9, 0xcb,
	0x8e, 0x24, 0x2b, 0x1d, 0x69, 0x34, 0x54, 0x95, 0xde, 0x99, 0xf8, 0xfb, 0xba, 0x97, 0xc9, 0x62,
	0x23, 0x0f, 0x44, 0xfe, 0xa2, 0xd3, 0x1f, 0x88, 0x7f, 0xac, 0xa3, 0x2c, 0xac, 0x4b, 0x9f, 0x8e,
	0x64, 0x55, 0x55, 0x54, 0xf1, 0xcf, 0x1c, 0xca, 0x01, 0x48, 0xad, 0x41, 0x8b, 0x07, 0xfe, 0xca,
	0xa1, 0x6d, 0xd8, 0xec, 0xcb, 0xea, 0xa5, 0xac, 0xf2, 0xd0, 0xdf, 0x39, 0xb4, 0x09, 0xe9, 0x8b,
	0x5e, 0xb7, 0xa7, 0x0c, 0x7b, 0xe2, 0x2f, 0xbb, 0x1e, 0x55, 0x4f, 0x1e, 0x0c, 0x15, 0xb5, 0xcb,
	0x33, 0x7e, 0xdd, 0x65, 0x45, 0x5f, 0xf6, 0x07, 0xf2, 0x67, 0x3c, 0xf4, 0xdb, 0xee, 0xf1, 0x63,
	0x1a, 0xb6, 0xb8, 0x8b, 0x7d, 0x62, 0x4f, 0x8d, 0x31, 0x41, 0x8f, 0x02, 0x88, 0xa1, 0x35, 0x7e,
	0x7b, 0x75, 0xa0, 0x33, 0xeb, 0x8b, 0x95, 0x67, 0x37, 0x12, 0x7f, 0xf0, 0xf8, 0xcf, 0x7f, 0x3f,
	0x27, 0x6a, 0xa8, 0xda, 0x98, 0x7e, 0x38, 0xbb, 0x32, 0xfd, 0xb5, 0x6e, 0x5c, 0x13, 0x97, 0xff,
	0xfb, 0x6e, 0x36, 0xc1, 0x1f, 0x90, 0x03, 0x62, 0x7f, 0x55, 0x43, 0x29, 0x6e, 0xa9, 0x8a, 0x85,
	0x08, 0x19, 0x6c, 0xcc, 0xf8, 0x88, 0xb1, 0x57, 0x70, 0x29, 0x82, 0xdd, 0x09, 0xd8, 0x9b, 0x42,
	0x0d, 0x7d, 0x0f, 0xf9, 0xa5, 0xbd, 0xe2, 0xbc, 0x7b, 0xab, 0xbc, 0x2b, 0xcb, 0x17, 0x43, 0x5d,
	0x63, 0xd4, 0x07, 0x78, 0x2f, 0x82, 0x5a, 0x67, 0x28, 0x73, 0xf6, 0x7b, 0xc8, 0xcf, 0x5f, 0x01,
	0xe5, 0x2a, 0xb8, 0x17, 0x63, 0x9c, 0x7f, 0x27, 0xc4, 0x3b, 0x07, 0xc0, 0xef, 0x31, 0xea, 0x7d,
	0x54, 0xf1, 0xa8, 0xa7, 0x86, 0x4e, 0x68, 0x83, 0x5d, 0x79, 0x0d, 0xf6, 0x48, 0x2c, 0x99, 0x7d,
	0x0f, 0xf9, 0x33, 0xe2, 0x86, 0xae, 0xf6, 0x18, 0xe6, 0x62, 0x88, 0x79, 0x56, 0x1d, 0xf4, 0x8c,
	0xf0, 0x62, 0xcf, 0x3e, 0xb5, 0x69, 0x38, 0xee, 0x12, 0xf3, 0xb7, 0xb0, 0x13, 0xfd, 0xac, 0x1c,
	0xae, 0x72, 0x47, 0xa6, 0xc5, 0x38, 0x5f, 0x66, 0x2a, 0x8a, 0x78, 0x27, 0xac, 0x42, 0xd3, 0x75,
	0xcf, 0xef, 0x1f, 0x05, 0x28, 0xc6, 0x3c, 0x8d, 0xb5, 0xe8, 0xa9, 0x47, 0xe5, 0xc6, 0xc8, 0xd8,
	0x67, 0x32, 0xde, 0xc5, 0x85, 0xb0, 0x0c, 0x7f, 0xfe, 0x4d, 0xa1, 0xf6, 0xf5, 0x1a, 0xfb, 0x1c,
	0xf8, 0xe8, 0x55, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0xcc, 0x8e, 0x30, 0x55, 0x08, 0x00, 0x00,
}
